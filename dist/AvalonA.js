// Generated by CoffeeScript 1.9.3
(function() {
  var ActiveArea, DomUtil, Layer, Signal, Transformer, _TweenLite, defineAvalonA, ref,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DomUtil = {
    getTransformStyle: function(style) {
      return style.getPropertyValue('-webkit-transform-style') || style.getPropertyValue('-moz-transform-style') || style.getPropertyValue('-ms-transform-style') || style.getPropertyValue('transform-style');
    },
    getTransform: function(style) {
      return style.getPropertyValue('-webkit-transform') || style.getPropertyValue('-moz-transform') || style.getPropertyValue('-o-transform') || style.getPropertyValue('-ms-transform') || style.getPropertyValue('transform');
    },
    getDebugName: function(node) {
      return node.tagName + "(" + (node.id || node.getAttribute('class') || node.getAttribute('href')) + ")";
    }
  };

  ActiveArea = (function() {
    var dimensionPattern, validDimension;

    dimensionPattern = /^\d+(%|px)?$/gi;

    validDimension = function(dimension) {
      var result;
      dimensionPattern.lastIndex = 0;
      result = dimensionPattern.test(dimension);
      dimensionPattern.lastIndex = 0;
      return result;
    };

    ActiveArea.prototype.assertValid = function() {
      var errors, ref;
      errors = ['The following validation errors occured:'];
      if (typeof this.position !== 'object') {
        if (this.position !== 'auto') {
          errors.push("area.position is not valid (" + this.position + ")");
        }
      } else {
        if (this.position.x !== 'auto' && !validDimension(this.position.x)) {
          errors.push("area.position.x is not valid (" + this.position.x + "})");
        }
        if (this.position.y !== 'auto' && !validDimension(this.position.y)) {
          errors.push("area.position.y is not valid (" + this.position.y + "})");
        }
      }
      if ((ref = this.attachment) !== 'fixed' && ref !== 'scroll') {
        errors.push("area.attachment is not valid (" + this.attachment + ")");
      }
      if (!validDimension(this.area.width)) {
        errors.push("area.width is not valid (" + this.area.width + ")");
      }
      if (!validDimension(this.area.height)) {
        errors.push("area.height is not valid (" + this.area.height + ")");
      }
      if (errors.length > 1) {
        throw new Error(errors.join("\n"));
      }
    };

    ActiveArea.prototype.processActiveArea = function() {
      this.width = parseInt(this.area.width, 10);
      this.widthIsFluid = dimensionPattern.exec(this.area.width)[1] === '%';
      dimensionPattern.lastIndex = 0;
      this.height = parseInt(this.area.height, 10);
      this.heightIsFluid = dimensionPattern.exec(this.area.height)[1] === '%';
      dimensionPattern.lastIndex = 0;
      if (typeof this.position === 'object') {
        if (this.position.x !== 'auto') {
          this.x = parseInt(this.position.x, 10);
        }
        if (this.position.y !== 'auto') {
          return this.y = parseInt(this.position.y, 10);
        }
      }
    };

    ActiveArea.prototype.init = function(frame) {
      var frameScrollCount, resizeDebugCode, scrollDebugCode, self, windowScrollCount, xBaseComputation, yBaseComputation;
      this.frame = frame;
      if (!this.frame) {
        throw new Error("frame argument cannot be null");
      }
      this.xBase = (xBaseComputation = this.getXBaseComputation())();
      this.yBase = (yBaseComputation = this.getYBaseComputation())();
      if (this.widthIsFluid) {
        this.xMaxComputation = function() {
          return this.xMin + (this.width / 100) * parseInt(getComputedStyle(this.frame).width, 10);
        };
      } else {
        this.xMaxComputation = function() {
          return this.xMin + this.width;
        };
      }
      if (this.heightIsFluid) {
        this.yMaxComputation = function() {
          return this.yMin + (this.height / 100) * parseInt(getComputedStyle(this.frame).height, 10);
        };
      } else {
        this.yMaxComputation = function() {
          return this.yMin + this.height;
        };
      }
      if (this.attachment === 'fixed') {
        this.xPadding = this.frame.scrollLeft;
        this.yPadding = this.frame.scrollTop;
        if (this.debug === true) {
          console.log("Listen to scroll event");
          self = this;
          scrollDebugCode = function() {
            return console.log("Scroll : @xPadding = " + self.xPadding + ", @yPadding = " + self.yPadding);
          };
        } else {
          scrollDebugCode = function() {};
        }
        windowScrollCount = 0;
        window.addEventListener('scroll', (function(_this) {
          return function() {
            if (++windowScrollCount % 5 > 0) {
              return;
            }
            _this.xPadding = window.pageXOffset;
            _this.yPadding = window.pageYOffset;
            _this.refreshBounds();
            return scrollDebugCode();
          };
        })(this), false);
        frameScrollCount = 0;
        this.frame.addEventListener('scroll', (function(_this) {
          return function() {
            if (++frameScrollCount % 5 > 0) {
              return;
            }
            _this.xPadding = _this.frame.scrollLeft;
            _this.yPadding = _this.frame.scrollTop;
            _this.refreshBounds();
            return scrollDebugCode();
          };
        })(this), false);
      } else {
        this.xPadding = this.yPadding = 0;
      }
      if (this.debug === true) {
        self = this;
        resizeDebugCode = function() {
          return console.log("Resize : @frame.style.width = " + (getComputedStyle(self.frame).width) + ", @frame.style.height = " + (getComputedStyle(self.frame).height));
        };
      } else {
        resizeDebugCode = function() {};
      }
      window.addEventListener('resize', (function(_this) {
        return function() {
          _this.xBase = xBaseComputation();
          _this.yBase = yBaseComputation();
          _this.refreshBounds();
          return resizeDebugCode();
        };
      })(this), false);
      return this.refreshBounds();
    };

    ActiveArea.prototype.refreshBounds = function() {
      this.xMin = this.xBase + this.xPadding;
      this.xMax = this.xMaxComputation();
      this.yMin = this.yBase + this.yPadding;
      return this.yMax = this.yMaxComputation();
    };

    ActiveArea.prototype.bounds = function() {
      return {
        xMin: this.xMin,
        xMax: this.xMax,
        yMin: this.yMin,
        yMax: this.yMax
      };
    };

    ActiveArea.prototype.getXBaseComputation = function() {
      var frameWidth, xBaseComputation;
      frameWidth = parseInt(getComputedStyle(this.frame).width, 10);
      if (this.position.x && this.position.x !== 'auto') {
        if (dimensionPattern.exec(this.position.x)[1] === '%') {
          xBaseComputation = (function(_this) {
            return function() {
              return (_this.x / 100) * frameWidth;
            };
          })(this);
        } else {
          xBaseComputation = (function(_this) {
            return function() {
              return _this.x;
            };
          })(this);
        }
        dimensionPattern.lastIndex = 0;
      } else {
        if (this.widthIsFluid) {
          xBaseComputation = (function(_this) {
            return function() {
              return ((50 - _this.width / 2) / 100) * frameWidth;
            };
          })(this);
        } else {
          xBaseComputation = (function(_this) {
            return function() {
              return frameWidth / 2 - _this.width / 2;
            };
          })(this);
        }
      }
      return xBaseComputation;
    };

    ActiveArea.prototype.getYBaseComputation = function() {
      var frameHeight, yBaseComputation;
      frameHeight = parseInt(getComputedStyle(this.frame).height, 10);
      if (this.position.y && this.position.y !== 'auto') {
        if (dimensionPattern.exec(this.position.y)[1] === '%') {
          yBaseComputation = (function(_this) {
            return function() {
              return (_this.y / 100) * frameHeight;
            };
          })(this);
        } else {
          yBaseComputation = (function(_this) {
            return function() {
              return _this.y;
            };
          })(this);
        }
        dimensionPattern.lastIndex = 0;
      } else {
        if (this.heightIsFluid) {
          yBaseComputation = (function(_this) {
            return function() {
              return ((50 - _this.height / 2) / 100) * frameHeight;
            };
          })(this);
        } else {
          yBaseComputation = (function(_this) {
            return function() {
              return frameHeight / 2 - _this.height / 2;
            };
          })(this);
        }
      }
      return yBaseComputation;
    };

    ActiveArea.prototype.mouseover = function(event) {
      var ref, ref1;
      return (this.xMin <= (ref = event.pageX) && ref <= this.xMax) && (this.yMin <= (ref1 = event.pageY) && ref1 <= this.yMax);
    };

    function ActiveArea(area) {
      var base, base1;
      this.area = area;
      if (!this.area) {
        throw new Error("area argument is missing");
      }
      this.position = this.area.position || 'auto';
      if (typeof this.position === 'object') {
        if ((base = this.position).x == null) {
          base.x = 'auto';
        }
        if ((base1 = this.position).y == null) {
          base1.y = 'auto';
        }
        if (this.position.x === 'auto' && this.position.y === 'auto') {
          this.position = 'auto';
        }
      }
      this.attachment = this.area.attachment || 'fixed';
      this.assertValid();
      this.processActiveArea();
    }

    return ActiveArea;

  })();

  Signal = (function() {
    function Signal() {}

    Signal.prototype._Ø = Object.create(null);

    Signal.prototype.register = function(listener) {
      if (typeof listener === 'function') {
        return (this._listeners != null ? this._listeners : this._listeners = []).push(listener);
      }
    };

    Signal.prototype.unregister = function(listener) {
      var index;
      if (this._listeners) {
        index = this._listeners.indexOf(listener);
        if (!(index < 0)) {
          return this._listeners.splice(index, 1);
        }
      }
    };

    Signal.prototype.clear = function() {
      return this._listener = void 0;
    };

    Signal.prototype.send = function(sender, data) {
      var i, len, listener, ref, results;
      if (this._listeners) {
        ref = this._listeners;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          listener = ref[i];
          results.push(listener.call(this._Ø, sender, data));
        }
        return results;
      }
    };

    return Signal;

  })();

  Layer = (function() {
    var fn, i, len, property, ref;

    Layer.properties = ['x', 'y', 'z', 'rx', 'ry', 'rz', 'ox', 'oy', 'oz'];

    ref = Layer.properties;
    fn = function(property) {
      var propertyPattern;
      propertyPattern = new RegExp("\\b" + property + "\\s*:\\s*(-?\\d+(\\.\\d+)?)\\b");
      return Object.defineProperty(Layer.prototype, property, {
        get: function() {
          var ref1, transforms, value;
          transforms = this.node.getAttribute(this._transformAttribute);
          value = parseFloat((ref1 = propertyPattern.exec(transforms)) != null ? ref1[1].trim() : void 0, 10);
          if (isNaN(value)) {
            if (property[0] !== 'o') {
              return 0;
            } else {
              return 0.5;
            }
          } else {
            return value;
          }
        },
        set: function(value) {
          var newTransforms, numericValue, transforms;
          numericValue = parseFloat(value, 10);
          if (isNaN(numericValue)) {
            throw "[Layer] - set " + property + " - value (" + value + ") is not valid";
          }
          transforms = (this.node.getAttribute(this._transformAttribute)).trim();
          if (propertyPattern.test(transforms)) {
            newTransforms = transforms.replace(propertyPattern, property + ":" + numericValue);
          } else {
            newTransforms = property + ":" + numericValue;
            if (transforms) {
              newTransforms = transforms + "; " + newTransforms;
            }
          }
          return this.node.setAttribute(this._transformAttribute, newTransforms);
        }
      });
    };
    for (i = 0, len = ref.length; i < len; i++) {
      property = ref[i];
      fn(property);
    }

    function Layer(node1, _transformAttribute) {
      var cssClass;
      this.node = node1;
      this._transformAttribute = _transformAttribute;
      if (this.node.id) {
        this.id = this.node.id;
      }
      if (this.node.className) {
        this.classes = (function() {
          var j, len1, ref1, results;
          ref1 = this.node.className.split(/\s+/g);
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            cssClass = ref1[j];
            results.push(cssClass);
          }
          return results;
        }).call(this);
      }
      this.on = {
        refresh: new Signal
      };
    }

    Layer.prototype.refresh = function() {
      return this.on.refresh.send(this);
    };

    Layer.prototype.transform = function(properties) {
      var results, value;
      results = [];
      for (property in properties) {
        value = properties[property];
        if (indexOf.call(Layer.properties, property) >= 0) {
          results.push(this[property] = value);
        }
      }
      return results;
    };

    return Layer;

  })();

  Transformer = (function() {
    Transformer.CSS_BACKUP_ATTRIBUTE = 'data-css-backup';

    Transformer.TRANSITION_DURATION = 0.75;

    Transformer.prototype._static = Transformer;

    function Transformer(params) {
      this._onTweenComplete = bind(this._onTweenComplete, this);
      this._from = params.from, this._isRoot = params.isRoot, this._transformAttribute = params.transformAttribute, this._debug = params.debug;
      if (!this._from) {
        throw "[Transformer] - constructor - from argument must be defined";
      }
      if (!this._transformAttribute) {
        throw "[Transformer] - constructor - transformAttribute argument must be defined";
      }
      if (this._isRoot == null) {
        throw "[Transformer] - constructor - isRoot argument must be defined";
      }
      this.on = {
        complete: new Signal
      };
    }

    Transformer.prototype.applyTransform = function() {
      this._calcTransformsCount();
      return this._applyTransform(this._from, this._isRoot);
    };

    Transformer.prototype._calcTransformsCount = function() {
      var from, transformAttribute;
      transformAttribute = this._transformAttribute;
      from = this._from;
      this._transformsCount = from.querySelectorAll("[" + transformAttribute + "]").length;
      if (from.getAttribute(transformAttribute)) {
        return this._transformsCount++;
      }
    };

    Transformer.prototype._applyTransform = function(from, isRoot) {
      var child, classSelector, cssClass, debugNode, i, j, k, layer, layers, len, len1, len2, ref, ref1, ref2, ref3, subLayers, transformAttribute;
      if (isRoot == null) {
        isRoot = false;
      }
      layers = this._layers = {
        all: []
      };
      transformAttribute = this._transformAttribute;
      this._applyOn(from);
      if (this._debug === true) {
        debugNode = from.firstElementChild;
        if (debugNode) {
          console.log("[Transformer] - refreshTransform - firstChild: " + (DomUtil.getDebugName(debugNode)));
        }
      }
      ref = from.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        subLayers = this._refreshChildTransform(child);
        if (subLayers) {
          (ref1 = layers.all).push.apply(ref1, subLayers);
        }
      }
      if (!isRoot && from.getAttribute(transformAttribute)) {
        layers.root = new Layer(from, transformAttribute);
        layers.all.push(layers.root);
      }
      if (isRoot) {
        ref2 = layers.all;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          layer = ref2[j];
          if (layer.id) {
            layers["#" + layer.id] = layer;
          }
          if (!layer.registered) {
            layer.registered = true;
            layer.on.refresh.register((function(_this) {
              return function(layer) {
                var transformer;
                transformer = new Transformer({
                  from: layer.node,
                  isRoot: false,
                  transformAttribute: transformAttribute,
                  debug: _this._debug
                });
                transformer.on.complete.register(function(sender, data) {
                  return _this.on.complete.send(sender, data);
                });
                return transformer.applyTransform();
              };
            })(this));
          }
          if (layer.classes) {
            ref3 = layer.classes;
            for (k = 0, len2 = ref3.length; k < len2; k++) {
              cssClass = ref3[k];
              classSelector = "." + cssClass;
              if (layers[classSelector] == null) {
                layers[classSelector] = [];
              }
              layers[classSelector].push(layer);
            }
          }
        }
      }
      return layers;
    };

    Transformer.prototype._refreshChildTransform = function(child) {
      var transformAttribute;
      if (!child) {
        throw "[Transformer] - _refreshChildTransform - child argument cannot be null";
      }
      transformAttribute = this._transformAttribute;
      if (child.querySelectorAll("[" + transformAttribute + "]").length) {
        if (this._debug === true) {
          console.log("[Transformer] - _refreshChildTransform - child " + (DomUtil.getDebugName(child)) + " has children");
        }
        return this._applyTransform(child).all;
      } else if (child.getAttribute(transformAttribute)) {
        if (this._debug === true) {
          console.log("[Transformer] - _refreshChildTransform - child " + (DomUtil.getDebugName(child)) + " has '" + transformAttribute + "'");
        }
        this._applyOn(child);
      }
      if (child.getAttribute(transformAttribute)) {
        return [new Layer(child, transformAttribute)];
      }
    };

    Transformer.prototype._applyOn = function(target) {
      var attrValue, css, i, j, len, len1, o, ox, oy, oz, prop, ref, ref1, ref2, rx, ry, rz, t, transformAttribute, transformOrigin, transforms, value, x, y, z;
      if (!target) {
        throw "[Transformer] - _applyOn - target argument cannot be null";
      }
      transformAttribute = this._transformAttribute;
      this._backup(target);
      _TweenLite.set(target, {
        css: {
          transformStyle: 'preserve-3d',
          overflow: 'visible'
        }
      });
      if ((attrValue = target.getAttribute(transformAttribute))) {
        transforms = {};
        ref = attrValue.split(';');
        for (i = 0, len = ref.length; i < len; i++) {
          t = ref[i];
          if (!(t.trim())) {
            continue;
          }
          ref1 = t.split(':'), prop = ref1[0], value = ref1[1];
          transforms[prop.trim()] = parseFloat(value.trim(), 10);
        }
        x = transforms.x, y = transforms.y, z = transforms.z, rx = transforms.rx, ry = transforms.ry, rz = transforms.rz, ox = transforms.ox, oy = transforms.oy, oz = transforms.oz;
        if (x || y || z || rx || ry || rz || ox || oy || oz) {
          css = {};
          if (x) {
            css.x = x;
          }
          if (y) {
            css.y = y;
          }
          if (z) {
            css.z = z;
          }
          if (rx) {
            css.rotationX = rx;
          }
          if (ry) {
            css.rotationY = ry;
          }
          if (rz) {
            css.rotationZ = rz;
          }
          transformOrigin = [];
          ref2 = [oz, oy, ox];
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            o = ref2[j];
            if ((o != null) || transformOrigin.length > 0) {
              transformOrigin.unshift((100 * (o != null ? o : 0.5)) + "%");
            }
          }
          if (transformOrigin.length > 0) {
            css.transformOrigin = transformOrigin.join(' ');
          }
          return _TweenLite.to(target, this._static.TRANSITION_DURATION, {
            css: css
          }).eventCallback('onComplete', this._onTweenComplete);
        }
      }
    };

    Transformer.prototype._backup = function(target) {
      var backup, targetStyle, transformBackup;
      if (!target.getAttribute(this._static.CSS_BACKUP_ATTRIBUTE)) {
        targetStyle = getComputedStyle(target);
        backup = {
          transformStyle: DomUtil.getTransformStyle(targetStyle) || 'flat',
          overflow: targetStyle.overflow || 'inherit'
        };
        transformBackup = DomUtil.getTransform(targetStyle);
        if (transformBackup) {
          backup.transform = transformBackup;
        }
        return target.setAttribute(Transformer.CSS_BACKUP_ATTRIBUTE, JSON.stringify(backup));
      }
    };

    Transformer.prototype._onTweenComplete = function() {
      if (this._debug === true) {
        console.log("[Transformer] - _onTweenComplete - @_transformsCount: " + this._transformsCount);
      }
      if (--this._transformsCount === 0) {
        return this.on.complete.send(this._from, this._isRoot);
      }
    };

    return Transformer;

  })();


  /* AvalonA 1.2.0 */

  console.log('%cAvalonA 1.2.0', 'font-size:80%;padding:0.2em 0.5em;color:#FFFFD5;background-color:#FF0066;');

  _TweenLite = void 0;

  defineAvalonA = function() {
    var Frame3d;
    Frame3d = (function() {
      var detectTransformStyleSupport, noeffect, transformStyleIsSupported;

      noeffect = function(rotation) {
        return rotation;
      };

      transformStyleIsSupported = void 0;

      detectTransformStyleSupport = function() {
        var element;
        if (transformStyleIsSupported === void 0) {
          element = document.createElement('b');
          element.id = 'avalona-detection-element';
          element.style.position = 'absolute';
          element.style.top = 0;
          element.style.left = 0;
          document.body.appendChild(element);
          element.style.webkitTransformStyle = 'preserve-3d';
          element.style.MozTransformStyle = 'preserve-3d';
          element.style.msTransformStyle = 'preserve-3d';
          element.style.transformStyle = 'preserve-3d';
          transformStyleIsSupported = DomUtil.getTransformStyle(getComputedStyle(element)) === 'preserve-3d';
          document.body.removeChild(element);
        }
        return transformStyleIsSupported;
      };

      Frame3d.prototype.find3dFrames = function() {
        this.frame = document.getElementById(this.frameId);
        this.transformedLayer = this.frame.querySelector("#" + this.layerId);
        if (this.debug === true) {
          console.log("@transformAttribute: " + this.transformAttribute);
          console.log("@layerId: " + this.layerId);
        }
        if (!this.frame) {
          throw new Error("Cannot find 3d frame '#" + this.frameId + "' in dom");
        }
        if (!this.transformedLayer) {
          throw new Error("Cannot find 3d inner frame '#" + this.frameId + " > #" + this.layerId + "' in dom");
        }
      };

      Frame3d.prototype.addPerspective = function() {
        return _TweenLite.set(this.transformedLayer, {
          css: {
            perspective: 1000
          }
        });
      };

      Frame3d.prototype.removePerspective = function() {
        return _TweenLite.set(this.transformedLayer, {
          css: {
            perspective: 'none'
          }
        });
      };

      Frame3d.prototype.trackMouseMovements = function() {
        var activeAreaPlaceholder, activeAreaPlaceholderId, ref, rule, value;
        if (this.debug === true && this.activeArea) {
          activeAreaPlaceholderId = 'avalona-active-area';
          activeAreaPlaceholder = document.getElementById(activeAreaPlaceholderId) || document.createElement('div');
          activeAreaPlaceholder.textContent = 'AvalonA Active Area';
          activeAreaPlaceholder.id = activeAreaPlaceholderId;
          ref = {
            'background-color': 'hotpink',
            'opacity': 0.5,
            'pointer-events': 'none',
            'position': 'absolute',
            'visibility': 'hidden',
            'z-index': 10000
          };
          for (rule in ref) {
            value = ref[rule];
            activeAreaPlaceholder.style.setProperty(rule, value);
          }
          document.body.appendChild(activeAreaPlaceholder);
          this.debugMouseMove = function() {
            var bounds, ref1, results;
            console.log("rotationX: " + this.rotationX + ", rotationY: " + this.rotationY);
            bounds = this.activeArea.bounds();
            ref1 = {
              visibility: 'visible',
              left: bounds.xMin + "px",
              top: bounds.yMin + "px",
              width: (bounds.xMax - bounds.xMin) + "px",
              height: (bounds.yMax - bounds.yMin) + "px"
            };
            results = [];
            for (rule in ref1) {
              value = ref1[rule];
              results.push(activeAreaPlaceholder.style.setProperty(rule, value));
            }
            return results;
          };
        } else {
          this.debugMouseMove = function() {};
        }
        if (this.activeArea) {
          this.activeArea.init(this.frame);
        } else {
          this.frame.addEventListener('mouseleave', function(e) {
            if (e.target.id === this.frameId) {
              return this.mouseout();
            }
          }, false);
        }
        return this.frame.addEventListener('mousemove', this.mousemove, false);
      };

      Frame3d.prototype.mouseout = function() {
        return this.disableRotation();
      };

      Frame3d.prototype.mouseMoveCount = 0;

      Frame3d.prototype.mousemove = function(event) {
        if (++this.mouseMoveCount % 5 > 0) {
          return;
        }
        if (!this.activeArea || this.activeArea.mouseover(event)) {
          this.onrotation();
          this.rotationY = (event.pageX - window.innerWidth / 2) / 25;
          this.rotationX = -1 * (event.pageY - window.innerHeight / 2) / 15;
          this.debugMouseMove();
          return _TweenLite.to(this.transformedLayer, 0.1, {
            css: {
              rotationX: this.fy(this.rotationX),
              rotationY: this.fx(this.rotationY)
            }
          });
        } else {
          return this.disableRotation();
        }
      };

      Frame3d.prototype.onrotation = function() {
        var ref;
        clearTimeout(this.rotationTimeoutId);
        if (!this.rotating) {
          if ((ref = this.animation) != null) {
            ref.pause();
          }
          if (typeof this.onstartrotation === "function") {
            this.onstartrotation();
          }
          this.rotating = true;
        }
        if (this.idleTimeout > 0) {
          return this.rotationTimeoutId = setTimeout(this.stopRotation, this.idleTimeout);
        }
      };

      Frame3d.prototype.stopRotation = function() {
        var ref;
        clearTimeout(this.rotationTimeoutId);
        if (this.rotating) {
          this.rotating = false;
          if (typeof this.onendrotation === "function") {
            this.onendrotation();
          }
          return (ref = this.animation) != null ? ref.play() : void 0;
        }
      };

      Frame3d.prototype.disableRotation = function(duration) {
        if (duration == null) {
          duration = 1;
        }
        if ((this.rotationX || this.rotationY) && (this.animation == null)) {
          this.resetRotation(duration);
        }
        return this.stopRotation();
      };

      Frame3d.prototype.resetRotation = function(duration) {
        if (duration == null) {
          duration = 1;
        }
        clearTimeout(this.rotationTimeoutId);
        this.rotationX = this.rotationY = 0;
        return _TweenLite.to(this.transformedLayer, duration, {
          css: {
            rotationX: 0,
            rotationY: 0
          }
        });
      };

      Frame3d.prototype.resetTransform = function() {
        var ref, results, rule, value;
        clearTimeout(this.rotationTimeoutId);
        this.rotationX = this.rotationY = 0;
        ref = {
          '-webkit-transform': 'none',
          '-moz-transform': 'none',
          '-o-transform': 'none',
          '-ms-transform': 'none',
          'transform': 'none'
        };
        results = [];
        for (rule in ref) {
          value = ref[rule];
          results.push(this.transformedLayer.style.setProperty(rule, value));
        }
        return results;
      };

      Frame3d.prototype.untrackMouseMovements = function() {
        var ref, ref1;
        if ((ref = this.frame) != null) {
          ref.removeEventListener("mousemove", this.mousemove);
        }
        return (ref1 = this.frame) != null ? ref1.removeEventListener("mouseleave", this.mouseout) : void 0;
      };

      Frame3d.prototype.refreshTransform = function(root) {
        var fromRoot, layers, rootNode, transformer;
        if (this.disabled === true) {
          return;
        }
        if (typeof root === 'string') {
          root = root.trim();
        }
        fromRoot = !root || root === this.transformedLayer;
        if (root == null) {
          root = this.transformedLayer;
        }
        rootNode = typeof root === 'string' ? this.transformedLayer.querySelector(root) : root;
        if (this.debug === true) {
          console.log("rootNode: " + (DomUtil.getDebugName(rootNode)));
        }
        transformer = new Transformer({
          from: rootNode,
          isRoot: fromRoot,
          transformAttribute: this.transformAttribute,
          debug: this.debug
        });
        transformer.on.complete.register((function(_this) {
          return function(sender, isRoot) {
            return typeof _this.onrefresh === "function" ? _this.onrefresh(sender, isRoot) : void 0;
          };
        })(this));
        transformer.on.complete.register((function(_this) {
          return function(sender, isRoot) {
            if (isRoot && !_this._enableTriggered) {
              _this._enableTriggered = true;
              return typeof _this.onenable === "function" ? _this.onenable(sender, isRoot) : void 0;
            }
          };
        })(this));
        layers = transformer.applyTransform();
        if (fromRoot) {
          this.layers = layers;
        }
        return layers;
      };

      Frame3d.prototype.refresh = function() {
        var layers, ref, ref1;
        if (this.disabled === true) {
          return;
        }
        if (this.frame) {
          this.untrackMouseMovements();
          if ((ref = this.animation) != null) {
            ref.pause();
          }
        }
        this.find3dFrames();
        this.addPerspective();
        layers = this.refreshTransform();
        if (!this.frozen) {
          this.trackMouseMovements();
          if ((ref1 = this.animation) != null) {
            ref1.play(this.transformedLayer, this.transformAttribute);
          }
        }
        return layers;
      };

      Frame3d.prototype.start = function() {
        return this.enable();
      };

      Frame3d.prototype.enable = function() {
        var error;
        if (this.disabled === false) {
          return;
        }
        this.disabled = false;
        this._enableTriggered = false;
        if (!this.ready) {
          try {
            if (typeof this.onready === "function") {
              this.onready();
            }
          } catch (_error) {
            error = _error;
            console.error('[AvalonA] - enable - Error occured on ready', error);
          }
          this.ready = true;
        }
        return this.refresh();
      };

      Frame3d.prototype.disable = function() {
        var ref;
        if (this.disabled === true) {
          return;
        }
        if (this.frame) {
          this.untrackMouseMovements();
          this.disableRotationEvent();
          if ((ref = this.animation) != null) {
            ref.pause();
          }
          this.flatten();
          this.removePerspective();
        }
        return this.disabled = true;
      };

      Frame3d.prototype.disableRotationEvent = function() {
        clearTimeout(this.rotationTimeoutId);
        if (this.rotating) {
          this.rotating = false;
          return typeof this.onendrotation === "function" ? this.onendrotation() : void 0;
        }
      };

      Frame3d.prototype.flatten = function() {
        var css, i, len, node, ref, results;
        this.resetTransform();
        ref = this.transformedLayer.querySelectorAll("[" + Transformer.CSS_BACKUP_ATTRIBUTE + "]");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          node = ref[i];
          if (this.debug === true) {
            console.log("flattening layer '" + (DomUtil.getDebugName(node)) + "'");
          }
          css = JSON.parse(node.getAttribute(Transformer.CSS_BACKUP_ATTRIBUTE));
          results.push(_TweenLite.set(node, {
            css: css
          }));
        }
        return results;
      };

      Frame3d.prototype.freeze = function() {
        var ref;
        if (this.frozen === true || !this.frame) {
          return;
        }
        this.untrackMouseMovements();
        this.disableRotationEvent();
        if ((ref = this.animation) != null) {
          ref.pause();
        }
        return this.frozen = true;
      };

      Frame3d.prototype.release = function() {
        var ref;
        if (this.frozen === false || !this.frame) {
          return;
        }
        this.trackMouseMovements();
        if ((ref = this.animation) != null) {
          ref.play(this.transformedLayer, this.transformAttribute);
        }
        return this.frozen = false;
      };

      Frame3d.prototype.init = function(options) {
        var ref, ref1;
        this.transformAttribute = options.tAttr || 'data-avalonA-transform';
        this.fx = typeof options.fx === 'function' ? options.fx : noeffect;
        this.fy = typeof options.fy === 'function' ? options.fy : noeffect;
        if (options.activeArea) {
          this.activeArea = new ActiveArea(options.activeArea);
        }
        if ((ref = this.activeArea) != null) {
          ref.debug = this.debug;
        }
        if (options.on) {
          ref1 = options.on, this.onstartrotation = ref1.startrotation, this.onendrotation = ref1.endrotation, this.onready = ref1.ready, this.onrefresh = ref1.refresh, this.onenable = ref1.enable;
        }
        this.animation = options.animation;
        this.idleTimeout = parseInt(options.idleTimeout || 1000, 10);
        if (this.animation) {
          this.assertAnimatorValid();
        }
        return Object.defineProperties(this, {
          onstart: {
            get: function() {
              return this.onenable;
            },
            set: function(onstart) {
              return this.onenable = onstart;
            }
          }
        });
      };

      Frame3d.prototype.assertAnimatorValid = function() {
        if (!this.animation.play || typeof this.animation.play !== 'function') {
          throw new Error("animation.play must be a function");
        }
        if (!this.animation.pause || typeof this.animation.pause !== 'function') {
          throw new Error("animation.pause must be a function");
        }
      };

      function Frame3d(frameId1, layerId1, options) {
        this.frameId = frameId1;
        this.layerId = layerId1;
        if (options == null) {
          options = {};
        }
        this.stopRotation = bind(this.stopRotation, this);
        this.mousemove = bind(this.mousemove, this);
        this.mouseout = bind(this.mouseout, this);
        if (!this.frameId) {
          throw new Error("frameId argument cannot be null");
        }
        if (!this.layerId) {
          throw new Error("layerId argument cannot be null");
        }
        this.debug = options.debug;
        detectTransformStyleSupport();
        if (this.debug === true) {
          console.log("transformStyleIsSupported: " + transformStyleIsSupported);
        }
        if (transformStyleIsSupported) {
          this.init(options);
        } else {
          this.flatten = this.disableRotationEvent = this.disable = this.start = this.enable = this.refresh = this.applyTransformOn = this.refreshChildTransform = this.refreshTransform = this.untrackMouseMovements = this.trackMouseMovements = this.addPerspective = this.removePerspective = function() {};
        }
      }

      return Frame3d;

    })();
    return function(frameId, layerId, options) {
      return new Frame3d(frameId, layerId, options);
    };
  };


  /* Export */

  if (typeof define === 'function' && define.amd) {
    define('AvalonA', ['tweenlite'], function(tweenlite) {
      _TweenLite = tweenlite;
      return defineAvalonA();
    });
  } else {
    _TweenLite = ((ref = window.GreenSockGlobals) != null ? ref.TweenLite : void 0) || TweenLite;
    window.AvalonA = defineAvalonA();
  }

}).call(this);
